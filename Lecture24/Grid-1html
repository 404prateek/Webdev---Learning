<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSS Grids</title>

 <!-- 1. fr means fraction - helps in distributing grids evenly.
2. repeat saves time in setting fractions.
3. minmax functions helps in adjusting cell width and height with minimum and maximum set values.
4. align-self, justify-self, justify-items, align-items works within grid cells.
5. "justify-content", "align-content" works within the entire grid container, "place-content" does both of their jobs in one go.
6. "justify" arranges items around the main axis and "align" arranges the items around cross axis.
7. Use "gap" instead of "padding" in grid or flex.
8. Lastly always try to use "start" and "end" rather than "flex-start" or "flex-end". -->





    <style>
        .container{
            width: 80vw;
            height: 50vh;
            border: 2px solid black;
            display: grid;
            /* grid-template-columns: 120px 100px;
            grid-template-rows: 100px 100px 100px; */
            grid-template-columns: repeat(4, minmax(100px, 1fr));
            gap: 10px 44px;
            justify-items:center;
            align-items: center;
        }
        
        .items{
            border: 2px solid red;
            width: 55px;
            height: 55px; 
        }

        .item-4{
            grid-row: 1/2;
            grid-column: 1/2;
            align-self: self-start;
            align-content: end;
        } 

        /* .item-1{
            grid-row: 1/2; */
             /* Or you can do this */
            /* grid-row-start: 1;
            grid-row-end: 2; */

            /* grid-column: 1/2;
        } */
    </style>
</head>
<body>
    <div class="container">
        <div class="items item-1">1</div>
        <div class="items">2</div>
        <div class="items">3</div>
        <div class="items item-4">4</div>
        <div class="items">5</div>
    </div>
</body>
</html>